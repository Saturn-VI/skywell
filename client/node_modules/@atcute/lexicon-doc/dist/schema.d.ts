import * as v from '@badrap/valita';
declare const _lexBoolean: v.ObjectType<{
    type: v.Type<"boolean">;
    description: v.Optional<string>;
    default: v.Optional<boolean>;
    const: v.Optional<boolean>;
}, undefined>;
export declare const lexBoolean: lexBoolean.$schema;
export interface LexBoolean extends v.Infer<typeof lexBoolean> {
}
export declare namespace lexBoolean {
    export {};
    type $schematype = typeof _lexBoolean;
    export interface $schema extends $schematype {
    }
}
declare const _lexInteger: v.Type<{
    type: "integer";
    description?: string | undefined;
    default?: number | undefined;
    minimum?: number | undefined;
    maximum?: number | undefined;
    enum?: number[] | undefined;
    const?: number | undefined;
}>;
export declare const lexInteger: lexInteger.$schema;
export interface LexInteger extends v.Infer<typeof lexInteger> {
}
export declare namespace lexInteger {
    export {};
    type $schematype = typeof _lexInteger;
    export interface $schema extends $schematype {
    }
}
declare const _lexStringFormat: v.UnionType<[v.Type<"datetime">, v.Type<"uri">, v.Type<"at-uri">, v.Type<"did">, v.Type<"handle">, v.Type<"at-identifier">, v.Type<"nsid">, v.Type<"cid">, v.Type<"language">, v.Type<"tid">, v.Type<"record-key">]>;
export declare const lexStringFormat: lexStringFormat.$schema;
export type LexStringFormat = v.Infer<typeof lexStringFormat>;
export declare namespace lexStringFormat {
    export {};
    type $schematype = typeof _lexStringFormat;
    export interface $schema extends $schematype {
    }
}
declare const _lexString: v.Type<{
    type: "string";
    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
    description?: string | undefined;
    default?: string | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
    minGraphemes?: number | undefined;
    maxGraphemes?: number | undefined;
    enum?: string[] | undefined;
    const?: string | undefined;
    knownValues?: string[] | undefined;
}>;
export declare const lexString: lexString.$schema;
export interface LexString extends v.Infer<typeof lexString> {
}
export declare namespace lexString {
    export {};
    type $schematype = typeof _lexString;
    export interface $schema extends $schematype {
    }
}
declare const _lexUnknown: v.ObjectType<{
    type: v.Type<"unknown">;
    description: v.Optional<string>;
}, undefined>;
export declare const lexUnknown: lexUnknown.$schema;
export interface LexUnknown extends v.Infer<typeof lexUnknown> {
}
export declare namespace lexUnknown {
    export {};
    type $schematype = typeof _lexUnknown;
    export interface $schema extends $schematype {
    }
}
declare const _lexPrimitive: v.UnionType<[lexBoolean.$schema, lexInteger.$schema, lexString.$schema, lexUnknown.$schema]>;
export declare const lexPrimitive: lexPrimitive.$schema;
export type LexPrimitive = v.Infer<typeof lexPrimitive>;
export declare namespace lexPrimitive {
    export {};
    type $schematype = typeof _lexPrimitive;
    export interface $schema extends $schematype {
    }
}
declare const _lexBytes: v.Type<{
    type: "bytes";
    description?: string | undefined;
    minLength?: number | undefined;
    maxLength?: number | undefined;
}>;
export declare const lexBytes: lexBytes.$schema;
export interface LexBytes extends v.Infer<typeof lexBytes> {
}
export declare namespace lexBytes {
    export {};
    type $schematype = typeof _lexBytes;
    export interface $schema extends $schematype {
    }
}
declare const _lexCidLink: v.ObjectType<{
    type: v.Type<"cid-link">;
    description: v.Optional<string>;
}, undefined>;
export declare const lexCidLink: lexCidLink.$schema;
export interface LexCidLink extends v.Infer<typeof lexCidLink> {
}
export declare namespace lexCidLink {
    export {};
    type $schematype = typeof _lexCidLink;
    export interface $schema extends $schematype {
    }
}
declare const _lexIpldType: v.UnionType<[lexBytes.$schema, lexCidLink.$schema]>;
export declare const lexIpldType: lexIpldType.$schema;
export type LexIpldType = v.Infer<typeof lexIpldType>;
export declare namespace lexIpldType {
    export {};
    type $schematype = typeof _lexIpldType;
    export interface $schema extends $schematype {
    }
}
declare const _lexRef: v.ObjectType<{
    type: v.Type<"ref">;
    description: v.Optional<string>;
    ref: v.Type<string>;
}, undefined>;
export declare const lexRef: lexRef.$schema;
export interface LexRef extends v.Infer<typeof lexRef> {
}
export declare namespace lexRef {
    export {};
    type $schematype = typeof _lexRef;
    export interface $schema extends $schematype {
    }
}
declare const _lexRefUnion: v.ObjectType<{
    type: v.Type<"union">;
    description: v.Optional<string>;
    refs: v.ArrayType<v.Type<string>>;
    closed: v.Type<boolean>;
}, undefined>;
export declare const lexRefUnion: lexRefUnion.$schema;
export interface LexRefUnion extends v.Infer<typeof lexRefUnion> {
}
export declare namespace lexRefUnion {
    export {};
    type $schematype = typeof _lexRefUnion;
    export interface $schema extends $schematype {
    }
}
declare const _lexRefVariant: v.UnionType<[lexRef.$schema, lexRefUnion.$schema]>;
export declare const lexRefVariant: lexRefVariant.$schema;
export type LexRefVariant = v.Infer<typeof lexRefVariant>;
export declare namespace lexRefVariant {
    export {};
    type $schematype = typeof _lexRefVariant;
    export interface $schema extends $schematype {
    }
}
declare const _lexBlob: v.ObjectType<{
    type: v.Type<"blob">;
    description: v.Optional<string>;
    accept: v.Optional<string[]>;
    maxSize: v.Optional<number>;
}, undefined>;
export declare const lexBlob: lexBlob.$schema;
export interface LexBlob extends v.Infer<typeof lexBlob> {
}
export declare namespace lexBlob {
    export {};
    type $schematype = typeof _lexBlob;
    export interface $schema extends $schematype {
    }
}
declare const _lexArray: v.Type<{
    type: "array";
    description?: string | undefined;
    items: {
        type: "boolean";
        description?: string | undefined;
        default?: boolean | undefined;
        const?: boolean | undefined;
    } | {
        type: "integer";
        description?: string | undefined;
        default?: number | undefined;
        minimum?: number | undefined;
        maximum?: number | undefined;
        enum?: number[] | undefined;
        const?: number | undefined;
    } | {
        type: "string";
        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
        description?: string | undefined;
        default?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        minGraphemes?: number | undefined;
        maxGraphemes?: number | undefined;
        enum?: string[] | undefined;
        const?: string | undefined;
        knownValues?: string[] | undefined;
    } | {
        type: "unknown";
        description?: string | undefined;
    } | {
        type: "bytes";
        description?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | {
        type: "cid-link";
        description?: string | undefined;
    } | {
        type: "ref";
        description?: string | undefined;
        ref: string;
    } | {
        type: "union";
        description?: string | undefined;
        refs: string[];
        closed: boolean;
    } | {
        type: "blob";
        description?: string | undefined;
        accept?: string[] | undefined;
        maxSize?: number | undefined;
    };
    minLength?: number | undefined;
    maxLength?: number | undefined;
}>;
export declare const lexArray: lexArray.$schema;
export interface LexArray extends v.Infer<typeof lexArray> {
}
export declare namespace lexArray {
    export {};
    type $schematype = typeof _lexArray;
    export interface $schema extends $schematype {
    }
}
declare const _lexPrimitiveArray: v.Type<{
    type: "array";
    description?: string | undefined;
    items: {
        type: "boolean";
        description?: string | undefined;
        default?: boolean | undefined;
        const?: boolean | undefined;
    } | {
        type: "integer";
        description?: string | undefined;
        default?: number | undefined;
        minimum?: number | undefined;
        maximum?: number | undefined;
        enum?: number[] | undefined;
        const?: number | undefined;
    } | {
        type: "string";
        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
        description?: string | undefined;
        default?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        minGraphemes?: number | undefined;
        maxGraphemes?: number | undefined;
        enum?: string[] | undefined;
        const?: string | undefined;
        knownValues?: string[] | undefined;
    } | {
        type: "unknown";
        description?: string | undefined;
    };
    minLength?: number | undefined;
    maxLength?: number | undefined;
}>;
export declare const lexPrimitiveArray: lexPrimitiveArray.$schema;
export interface LexPrimitiveArray extends v.Infer<typeof lexPrimitiveArray> {
}
export declare namespace lexPrimitiveArray {
    export {};
    type $schematype = typeof _lexPrimitiveArray;
    export interface $schema extends $schematype {
    }
}
declare const _lexToken: v.ObjectType<{
    type: v.Type<"token">;
    description: v.Optional<string>;
}, undefined>;
export declare const lexToken: lexToken.$schema;
export interface LexToken extends v.Infer<typeof lexToken> {
}
export declare namespace lexToken {
    export {};
    type $schematype = typeof _lexToken;
    export interface $schema extends $schematype {
    }
}
declare const _lexObject: v.Type<{
    type: "object";
    description?: string | undefined;
    required?: string[] | undefined;
    nullable?: string[] | undefined;
    properties?: Record<string, {
        type: "boolean";
        description?: string | undefined;
        default?: boolean | undefined;
        const?: boolean | undefined;
    } | {
        type: "integer";
        description?: string | undefined;
        default?: number | undefined;
        minimum?: number | undefined;
        maximum?: number | undefined;
        enum?: number[] | undefined;
        const?: number | undefined;
    } | {
        type: "string";
        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
        description?: string | undefined;
        default?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        minGraphemes?: number | undefined;
        maxGraphemes?: number | undefined;
        enum?: string[] | undefined;
        const?: string | undefined;
        knownValues?: string[] | undefined;
    } | {
        type: "unknown";
        description?: string | undefined;
    } | {
        type: "bytes";
        description?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | {
        type: "cid-link";
        description?: string | undefined;
    } | {
        type: "ref";
        description?: string | undefined;
        ref: string;
    } | {
        type: "union";
        description?: string | undefined;
        refs: string[];
        closed: boolean;
    } | {
        type: "blob";
        description?: string | undefined;
        accept?: string[] | undefined;
        maxSize?: number | undefined;
    } | {
        type: "array";
        description?: string | undefined;
        items: {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "bytes";
            description?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
        } | {
            type: "cid-link";
            description?: string | undefined;
        } | {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "blob";
            description?: string | undefined;
            accept?: string[] | undefined;
            maxSize?: number | undefined;
        };
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }> | undefined;
}>;
export declare const lexObject: lexObject.$schema;
export interface LexObject extends v.Infer<typeof lexObject> {
}
export declare namespace lexObject {
    export {};
    type $schematype = typeof _lexObject;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcParameters: v.Type<{
    type: "params";
    description?: string | undefined;
    required?: string[] | undefined;
    properties?: Record<string, {
        type: "boolean";
        description?: string | undefined;
        default?: boolean | undefined;
        const?: boolean | undefined;
    } | {
        type: "integer";
        description?: string | undefined;
        default?: number | undefined;
        minimum?: number | undefined;
        maximum?: number | undefined;
        enum?: number[] | undefined;
        const?: number | undefined;
    } | {
        type: "string";
        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
        description?: string | undefined;
        default?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        minGraphemes?: number | undefined;
        maxGraphemes?: number | undefined;
        enum?: string[] | undefined;
        const?: string | undefined;
        knownValues?: string[] | undefined;
    } | {
        type: "unknown";
        description?: string | undefined;
    } | {
        type: "array";
        description?: string | undefined;
        items: {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        };
        minLength?: number | undefined;
        maxLength?: number | undefined;
    }> | undefined;
}>;
export declare const lexXrpcParameters: lexXrpcParameters.$schema;
export interface LexXrpcParameters extends v.Infer<typeof lexXrpcParameters> {
}
export declare namespace lexXrpcParameters {
    export {};
    type $schematype = typeof _lexXrpcParameters;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcBody: v.ObjectType<{
    description: v.Optional<string>;
    encoding: v.Type<string>;
    schema: v.Optional<{
        type: "ref";
        description?: string | undefined;
        ref: string;
    } | {
        type: "union";
        description?: string | undefined;
        refs: string[];
        closed: boolean;
    } | {
        type: "object";
        description?: string | undefined;
        required?: string[] | undefined;
        nullable?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "bytes";
            description?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
        } | {
            type: "cid-link";
            description?: string | undefined;
        } | {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "blob";
            description?: string | undefined;
            accept?: string[] | undefined;
            maxSize?: number | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    }>;
}, undefined>;
export declare const lexXrpcBody: lexXrpcBody.$schema;
export interface LexXrpcBody extends v.Infer<typeof lexXrpcBody> {
}
export declare namespace lexXrpcBody {
    export {};
    type $schematype = typeof _lexXrpcBody;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcSubscriptionMessage: v.ObjectType<{
    description: v.Optional<string>;
    schema: v.Optional<{
        type: "ref";
        description?: string | undefined;
        ref: string;
    } | {
        type: "union";
        description?: string | undefined;
        refs: string[];
        closed: boolean;
    } | {
        type: "object";
        description?: string | undefined;
        required?: string[] | undefined;
        nullable?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "bytes";
            description?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
        } | {
            type: "cid-link";
            description?: string | undefined;
        } | {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "blob";
            description?: string | undefined;
            accept?: string[] | undefined;
            maxSize?: number | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    }>;
}, undefined>;
export declare const lexXrpcSubscriptionMessage: lexXrpcSubscriptionMessage.$schema;
export interface LexXrpcSubscriptionMessage extends v.Infer<typeof lexXrpcSubscriptionMessage> {
}
export declare namespace lexXrpcSubscriptionMessage {
    export {};
    type $schematype = typeof _lexXrpcSubscriptionMessage;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcError: v.ObjectType<{
    name: v.Type<string>;
    description: v.Optional<string>;
}, undefined>;
export declare const lexXrpcError: lexXrpcError.$schema;
export interface LexXrpcError extends v.Infer<typeof lexXrpcError> {
}
export declare namespace lexXrpcError {
    export {};
    type $schematype = typeof _lexXrpcError;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcQuery: v.ObjectType<{
    type: v.Type<"query">;
    description: v.Optional<string>;
    parameters: v.Optional<{
        type: "params";
        description?: string | undefined;
        required?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    }>;
    output: v.Optional<{
        description?: string | undefined;
        encoding: string;
        schema?: {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "object";
            description?: string | undefined;
            required?: string[] | undefined;
            nullable?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
    }>;
    errors: v.Optional<{
        name: string;
        description?: string | undefined;
    }[]>;
}, undefined>;
export declare const lexXrpcQuery: lexXrpcQuery.$schema;
export interface LexXrpcQuery extends v.Infer<typeof lexXrpcQuery> {
}
export declare namespace lexXrpcQuery {
    export {};
    type $schematype = typeof _lexXrpcQuery;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcProcedure: v.ObjectType<{
    type: v.Type<"procedure">;
    description: v.Optional<string>;
    parameters: v.Optional<{
        type: "params";
        description?: string | undefined;
        required?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    }>;
    input: v.Optional<{
        description?: string | undefined;
        encoding: string;
        schema?: {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "object";
            description?: string | undefined;
            required?: string[] | undefined;
            nullable?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
    }>;
    output: v.Optional<{
        description?: string | undefined;
        encoding: string;
        schema?: {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "object";
            description?: string | undefined;
            required?: string[] | undefined;
            nullable?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
    }>;
    errors: v.Optional<{
        name: string;
        description?: string | undefined;
    }[]>;
}, undefined>;
export declare const lexXrpcProcedure: lexXrpcProcedure.$schema;
export interface LexXrpcProcedure extends v.Infer<typeof lexXrpcProcedure> {
}
export declare namespace lexXrpcProcedure {
    export {};
    type $schematype = typeof _lexXrpcProcedure;
    export interface $schema extends $schematype {
    }
}
declare const _lexXrpcSubscription: v.ObjectType<{
    type: v.Type<"subscription">;
    description: v.Optional<string>;
    parameters: v.Optional<{
        type: "params";
        description?: string | undefined;
        required?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    }>;
    message: v.Optional<{
        description?: string | undefined;
        schema?: {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "object";
            description?: string | undefined;
            required?: string[] | undefined;
            nullable?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
    }>;
    errors: v.Optional<{
        name: string;
        description?: string | undefined;
    }[]>;
}, undefined>;
export declare const lexXrpcSubscription: lexXrpcSubscription.$schema;
export interface LexXrpcSubscription extends v.Infer<typeof lexXrpcSubscription> {
}
export declare namespace lexXrpcSubscription {
    export {};
    type $schematype = typeof _lexXrpcSubscription;
    export interface $schema extends $schematype {
    }
}
declare const _lexRecord: v.ObjectType<{
    type: v.Type<"record">;
    description: v.Optional<string>;
    key: v.Type<"nsid" | "tid" | "any" | `literal:${string}`>;
    record: lexObject.$schema;
}, undefined>;
export declare const lexRecord: lexRecord.$schema;
export interface LexRecord extends v.Infer<typeof lexRecord> {
}
export declare namespace lexRecord {
    export {};
    type $schematype = typeof _lexRecord;
    export interface $schema extends $schematype {
    }
}
declare const _lexUserType: v.UnionType<[lexRecord.$schema, lexXrpcQuery.$schema, lexXrpcProcedure.$schema, lexXrpcSubscription.$schema, lexObject.$schema, lexArray.$schema, lexToken.$schema, lexIpldType.$schema, lexBlob.$schema, lexPrimitive.$schema]>;
export declare const lexUserType: lexUserType.$schema;
export type LexUserType = v.Infer<typeof lexUserType>;
export declare namespace lexUserType {
    export {};
    type $schematype = typeof _lexUserType;
    export interface $schema extends $schematype {
    }
}
declare const _lexiconDoc: v.Type<{
    lexicon: 1;
    id: string;
    revision?: number | undefined;
    description?: string | undefined;
    defs: Record<string, {
        type: "boolean";
        description?: string | undefined;
        default?: boolean | undefined;
        const?: boolean | undefined;
    } | {
        type: "integer";
        description?: string | undefined;
        default?: number | undefined;
        minimum?: number | undefined;
        maximum?: number | undefined;
        enum?: number[] | undefined;
        const?: number | undefined;
    } | {
        type: "string";
        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
        description?: string | undefined;
        default?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
        minGraphemes?: number | undefined;
        maxGraphemes?: number | undefined;
        enum?: string[] | undefined;
        const?: string | undefined;
        knownValues?: string[] | undefined;
    } | {
        type: "unknown";
        description?: string | undefined;
    } | {
        type: "bytes";
        description?: string | undefined;
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | {
        type: "cid-link";
        description?: string | undefined;
    } | {
        type: "blob";
        description?: string | undefined;
        accept?: string[] | undefined;
        maxSize?: number | undefined;
    } | {
        type: "array";
        description?: string | undefined;
        items: {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "bytes";
            description?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
        } | {
            type: "cid-link";
            description?: string | undefined;
        } | {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "blob";
            description?: string | undefined;
            accept?: string[] | undefined;
            maxSize?: number | undefined;
        };
        minLength?: number | undefined;
        maxLength?: number | undefined;
    } | {
        type: "token";
        description?: string | undefined;
    } | {
        type: "object";
        description?: string | undefined;
        required?: string[] | undefined;
        nullable?: string[] | undefined;
        properties?: Record<string, {
            type: "boolean";
            description?: string | undefined;
            default?: boolean | undefined;
            const?: boolean | undefined;
        } | {
            type: "integer";
            description?: string | undefined;
            default?: number | undefined;
            minimum?: number | undefined;
            maximum?: number | undefined;
            enum?: number[] | undefined;
            const?: number | undefined;
        } | {
            type: "string";
            format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
            description?: string | undefined;
            default?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
            minGraphemes?: number | undefined;
            maxGraphemes?: number | undefined;
            enum?: string[] | undefined;
            const?: string | undefined;
            knownValues?: string[] | undefined;
        } | {
            type: "unknown";
            description?: string | undefined;
        } | {
            type: "bytes";
            description?: string | undefined;
            minLength?: number | undefined;
            maxLength?: number | undefined;
        } | {
            type: "cid-link";
            description?: string | undefined;
        } | {
            type: "ref";
            description?: string | undefined;
            ref: string;
        } | {
            type: "union";
            description?: string | undefined;
            refs: string[];
            closed: boolean;
        } | {
            type: "blob";
            description?: string | undefined;
            accept?: string[] | undefined;
            maxSize?: number | undefined;
        } | {
            type: "array";
            description?: string | undefined;
            items: {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            };
            minLength?: number | undefined;
            maxLength?: number | undefined;
        }> | undefined;
    } | {
        type: "query";
        description?: string | undefined;
        parameters?: {
            type: "params";
            description?: string | undefined;
            required?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
        output?: {
            description?: string | undefined;
            encoding: string;
            schema?: {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "object";
                description?: string | undefined;
                required?: string[] | undefined;
                nullable?: string[] | undefined;
                properties?: Record<string, {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                } | {
                    type: "array";
                    description?: string | undefined;
                    items: {
                        type: "boolean";
                        description?: string | undefined;
                        default?: boolean | undefined;
                        const?: boolean | undefined;
                    } | {
                        type: "integer";
                        description?: string | undefined;
                        default?: number | undefined;
                        minimum?: number | undefined;
                        maximum?: number | undefined;
                        enum?: number[] | undefined;
                        const?: number | undefined;
                    } | {
                        type: "string";
                        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                        description?: string | undefined;
                        default?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        minGraphemes?: number | undefined;
                        maxGraphemes?: number | undefined;
                        enum?: string[] | undefined;
                        const?: string | undefined;
                        knownValues?: string[] | undefined;
                    } | {
                        type: "unknown";
                        description?: string | undefined;
                    } | {
                        type: "bytes";
                        description?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                    } | {
                        type: "cid-link";
                        description?: string | undefined;
                    } | {
                        type: "ref";
                        description?: string | undefined;
                        ref: string;
                    } | {
                        type: "union";
                        description?: string | undefined;
                        refs: string[];
                        closed: boolean;
                    } | {
                        type: "blob";
                        description?: string | undefined;
                        accept?: string[] | undefined;
                        maxSize?: number | undefined;
                    };
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                }> | undefined;
            } | undefined;
        } | undefined;
        errors?: {
            name: string;
            description?: string | undefined;
        }[] | undefined;
    } | {
        type: "procedure";
        description?: string | undefined;
        parameters?: {
            type: "params";
            description?: string | undefined;
            required?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
        input?: {
            description?: string | undefined;
            encoding: string;
            schema?: {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "object";
                description?: string | undefined;
                required?: string[] | undefined;
                nullable?: string[] | undefined;
                properties?: Record<string, {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                } | {
                    type: "array";
                    description?: string | undefined;
                    items: {
                        type: "boolean";
                        description?: string | undefined;
                        default?: boolean | undefined;
                        const?: boolean | undefined;
                    } | {
                        type: "integer";
                        description?: string | undefined;
                        default?: number | undefined;
                        minimum?: number | undefined;
                        maximum?: number | undefined;
                        enum?: number[] | undefined;
                        const?: number | undefined;
                    } | {
                        type: "string";
                        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                        description?: string | undefined;
                        default?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        minGraphemes?: number | undefined;
                        maxGraphemes?: number | undefined;
                        enum?: string[] | undefined;
                        const?: string | undefined;
                        knownValues?: string[] | undefined;
                    } | {
                        type: "unknown";
                        description?: string | undefined;
                    } | {
                        type: "bytes";
                        description?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                    } | {
                        type: "cid-link";
                        description?: string | undefined;
                    } | {
                        type: "ref";
                        description?: string | undefined;
                        ref: string;
                    } | {
                        type: "union";
                        description?: string | undefined;
                        refs: string[];
                        closed: boolean;
                    } | {
                        type: "blob";
                        description?: string | undefined;
                        accept?: string[] | undefined;
                        maxSize?: number | undefined;
                    };
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                }> | undefined;
            } | undefined;
        } | undefined;
        output?: {
            description?: string | undefined;
            encoding: string;
            schema?: {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "object";
                description?: string | undefined;
                required?: string[] | undefined;
                nullable?: string[] | undefined;
                properties?: Record<string, {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                } | {
                    type: "array";
                    description?: string | undefined;
                    items: {
                        type: "boolean";
                        description?: string | undefined;
                        default?: boolean | undefined;
                        const?: boolean | undefined;
                    } | {
                        type: "integer";
                        description?: string | undefined;
                        default?: number | undefined;
                        minimum?: number | undefined;
                        maximum?: number | undefined;
                        enum?: number[] | undefined;
                        const?: number | undefined;
                    } | {
                        type: "string";
                        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                        description?: string | undefined;
                        default?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        minGraphemes?: number | undefined;
                        maxGraphemes?: number | undefined;
                        enum?: string[] | undefined;
                        const?: string | undefined;
                        knownValues?: string[] | undefined;
                    } | {
                        type: "unknown";
                        description?: string | undefined;
                    } | {
                        type: "bytes";
                        description?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                    } | {
                        type: "cid-link";
                        description?: string | undefined;
                    } | {
                        type: "ref";
                        description?: string | undefined;
                        ref: string;
                    } | {
                        type: "union";
                        description?: string | undefined;
                        refs: string[];
                        closed: boolean;
                    } | {
                        type: "blob";
                        description?: string | undefined;
                        accept?: string[] | undefined;
                        maxSize?: number | undefined;
                    };
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                }> | undefined;
            } | undefined;
        } | undefined;
        errors?: {
            name: string;
            description?: string | undefined;
        }[] | undefined;
    } | {
        type: "subscription";
        description?: string | undefined;
        parameters?: {
            type: "params";
            description?: string | undefined;
            required?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        } | undefined;
        message?: {
            description?: string | undefined;
            schema?: {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "object";
                description?: string | undefined;
                required?: string[] | undefined;
                nullable?: string[] | undefined;
                properties?: Record<string, {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                } | {
                    type: "array";
                    description?: string | undefined;
                    items: {
                        type: "boolean";
                        description?: string | undefined;
                        default?: boolean | undefined;
                        const?: boolean | undefined;
                    } | {
                        type: "integer";
                        description?: string | undefined;
                        default?: number | undefined;
                        minimum?: number | undefined;
                        maximum?: number | undefined;
                        enum?: number[] | undefined;
                        const?: number | undefined;
                    } | {
                        type: "string";
                        format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                        description?: string | undefined;
                        default?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        minGraphemes?: number | undefined;
                        maxGraphemes?: number | undefined;
                        enum?: string[] | undefined;
                        const?: string | undefined;
                        knownValues?: string[] | undefined;
                    } | {
                        type: "unknown";
                        description?: string | undefined;
                    } | {
                        type: "bytes";
                        description?: string | undefined;
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                    } | {
                        type: "cid-link";
                        description?: string | undefined;
                    } | {
                        type: "ref";
                        description?: string | undefined;
                        ref: string;
                    } | {
                        type: "union";
                        description?: string | undefined;
                        refs: string[];
                        closed: boolean;
                    } | {
                        type: "blob";
                        description?: string | undefined;
                        accept?: string[] | undefined;
                        maxSize?: number | undefined;
                    };
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                }> | undefined;
            } | undefined;
        } | undefined;
        errors?: {
            name: string;
            description?: string | undefined;
        }[] | undefined;
    } | {
        type: "record";
        description?: string | undefined;
        key: "nsid" | "tid" | "any" | `literal:${string}`;
        record: {
            type: "object";
            description?: string | undefined;
            required?: string[] | undefined;
            nullable?: string[] | undefined;
            properties?: Record<string, {
                type: "boolean";
                description?: string | undefined;
                default?: boolean | undefined;
                const?: boolean | undefined;
            } | {
                type: "integer";
                description?: string | undefined;
                default?: number | undefined;
                minimum?: number | undefined;
                maximum?: number | undefined;
                enum?: number[] | undefined;
                const?: number | undefined;
            } | {
                type: "string";
                format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                description?: string | undefined;
                default?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
                minGraphemes?: number | undefined;
                maxGraphemes?: number | undefined;
                enum?: string[] | undefined;
                const?: string | undefined;
                knownValues?: string[] | undefined;
            } | {
                type: "unknown";
                description?: string | undefined;
            } | {
                type: "bytes";
                description?: string | undefined;
                minLength?: number | undefined;
                maxLength?: number | undefined;
            } | {
                type: "cid-link";
                description?: string | undefined;
            } | {
                type: "ref";
                description?: string | undefined;
                ref: string;
            } | {
                type: "union";
                description?: string | undefined;
                refs: string[];
                closed: boolean;
            } | {
                type: "blob";
                description?: string | undefined;
                accept?: string[] | undefined;
                maxSize?: number | undefined;
            } | {
                type: "array";
                description?: string | undefined;
                items: {
                    type: "boolean";
                    description?: string | undefined;
                    default?: boolean | undefined;
                    const?: boolean | undefined;
                } | {
                    type: "integer";
                    description?: string | undefined;
                    default?: number | undefined;
                    minimum?: number | undefined;
                    maximum?: number | undefined;
                    enum?: number[] | undefined;
                    const?: number | undefined;
                } | {
                    type: "string";
                    format?: "datetime" | "uri" | "at-uri" | "did" | "handle" | "at-identifier" | "nsid" | "cid" | "language" | "tid" | "record-key" | undefined;
                    description?: string | undefined;
                    default?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    minGraphemes?: number | undefined;
                    maxGraphemes?: number | undefined;
                    enum?: string[] | undefined;
                    const?: string | undefined;
                    knownValues?: string[] | undefined;
                } | {
                    type: "unknown";
                    description?: string | undefined;
                } | {
                    type: "bytes";
                    description?: string | undefined;
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                } | {
                    type: "cid-link";
                    description?: string | undefined;
                } | {
                    type: "ref";
                    description?: string | undefined;
                    ref: string;
                } | {
                    type: "union";
                    description?: string | undefined;
                    refs: string[];
                    closed: boolean;
                } | {
                    type: "blob";
                    description?: string | undefined;
                    accept?: string[] | undefined;
                    maxSize?: number | undefined;
                };
                minLength?: number | undefined;
                maxLength?: number | undefined;
            }> | undefined;
        };
    }>;
}>;
export declare const lexiconDoc: lexiconDoc.$schema;
export interface LexiconDoc extends v.Infer<typeof lexiconDoc> {
}
export declare namespace lexiconDoc {
    export {};
    type $schematype = typeof _lexiconDoc;
    export interface $schema extends $schematype {
    }
}
export {};
