import { Command } from './command.js';
export class HelpCommand extends Command {
    contexts;
    commands = [];
    index;
    static from(state, contexts) {
        const command = new HelpCommand(contexts);
        command.path = state.path;
        for (const opt of state.options) {
            switch (opt.name) {
                case `-c`:
                    {
                        command.commands.push(Number(opt.value));
                    }
                    break;
                case `-i`:
                    {
                        command.index = Number(opt.value);
                    }
                    break;
            }
        }
        return command;
    }
    constructor(contexts) {
        super();
        this.contexts = contexts;
    }
    async execute() {
        let commands = this.commands;
        if (typeof this.index !== `undefined` && this.index >= 0 && this.index < commands.length) {
            commands = [commands[this.index]];
        }
        if (commands.length === 0) {
            console.log(this.program.usage());
        }
        else if (commands.length === 1) {
            console.log(this.program.usage(this.contexts[commands[0]], { detailed: true }));
        }
        else if (commands.length > 1) {
            console.log(`Multiple commands match your selection:\n`);
            console.log(`\n`);
            let index = 0;
            for (const command of this.commands) {
                console.log(this.program.usage(this.contexts[command], { prefix: `${index++}. `.padStart(5) }));
            }
            console.log(`\n`);
            console.log(`Run again with -h=<index> to see the longer details of any of those commands.\n`);
        }
    }
}
//# sourceMappingURL=help-command.js.map