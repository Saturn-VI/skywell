import { Option, rerouteArguments } from './base.js';
export function Counter(descriptor, initialValueBase, optsBase) {
    const [initialValue, opts] = rerouteArguments(initialValueBase, optsBase ?? {});
    return new CounterOption(descriptor, initialValue, opts);
}
export class CounterOption extends Option {
    description;
    required;
    hidden;
    descriptor;
    initialValue;
    constructor(descriptor, initialValue, options) {
        super();
        this.description = options.description;
        this.required = options.required ?? false;
        this.hidden = options.hidden ?? false;
        this.descriptor = descriptor;
        this.initialValue = initialValue;
    }
    define(builder, _key) {
        builder.addOption({
            names: this.descriptor,
            allowBinding: false,
            arity: 0,
            hidden: this.hidden,
            description: this.description,
            required: this.required,
        });
    }
    transform(_builder, _key, state) {
        const set = new Set(this.descriptor);
        let currentValue = this.initialValue;
        for (const { name, value } of state.options) {
            if (!set.has(name)) {
                continue;
            }
            currentValue ??= 0;
            // Negated options reset the counter
            if (!value) {
                currentValue = 0;
            }
            else {
                currentValue += 1;
            }
        }
        return currentValue;
    }
}
//# sourceMappingURL=counter.js.map