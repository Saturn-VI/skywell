import { NoLimits } from '../core/index.js';
import { Option } from './base.js';
export function Rest(options = {}) {
    return new RestOption(options);
}
export class RestOption extends Option {
    name;
    required;
    constructor(options) {
        super();
        this.name = options.name;
        this.required = options.required;
    }
    define(builder, key) {
        builder.addRest({
            name: this.name ?? key,
            required: this.required,
        });
    }
    transform(builder, _key, state) {
        // The builder's arity.extra will always be NoLimits,
        // because it is set when we call registerDefinition
        const isRestPositional = (index) => {
            const positional = state.positionals[index];
            // A NoLimits extra (i.e. an optional rest argument)
            if (positional.extra === NoLimits) {
                return true;
            }
            // A leading positional (i.e. a required rest argument)
            if (positional.extra === false && index < builder.arity.leading.length) {
                return true;
            }
            return false;
        };
        let count = 0;
        while (count < state.positionals.length && isRestPositional(count)) {
            count += 1;
        }
        return state.positionals.splice(0, count).map((pos) => pos.value);
    }
}
//# sourceMappingURL=rest.js.map