import type { CommandBuilder, RunState } from '../core/index.js';
import { Option, type OptionFlags, type OptionReturn } from './base.js';
export type BooleanOptionFlags = OptionFlags;
/**
 * Used to annotate boolean options.
 *
 * @example
 * --foo --no-bar
 *     â–º {"foo": true, "bar": false}
 */
export declare function Boolean(descriptor: string[], opts: BooleanOptionFlags & {
    required: true;
}): OptionReturn<boolean>;
export declare function Boolean(descriptor: string[], opts?: BooleanOptionFlags): OptionReturn<boolean | undefined>;
export declare function Boolean(descriptor: string[], initialValue: boolean, opts?: Omit<BooleanOptionFlags, 'required'>): OptionReturn<boolean>;
export declare class BooleanOption extends Option<boolean | undefined> {
    description: string | undefined;
    required: boolean;
    hidden: boolean;
    descriptor: string[];
    initialValue: boolean | undefined;
    constructor(descriptor: string[], initialValue: boolean | undefined, options: BooleanOptionFlags);
    define(builder: CommandBuilder<unknown>, _key: string): void;
    transform(_builder: CommandBuilder<unknown>, _key: string, state: RunState): boolean | undefined;
}
