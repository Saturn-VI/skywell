import type { CommandBuilder, RunState } from '../core/index.js';
export type OptionFlags = {
    description?: string;
    required?: boolean;
    hidden?: boolean;
};
export declare abstract class Option<T = unknown> {
    abstract define(builder: CommandBuilder<unknown>, key: string): void;
    abstract transform(builder: CommandBuilder<unknown>, key: string, state: RunState): T;
}
export type OptionReturn<T> = T;
export type TupleOf<Type, Arity extends number, Accumulator extends Type[]> = Accumulator['length'] extends Arity ? Accumulator : TupleOf<Type, Arity, [Type, ...Accumulator]>;
export type Tuple<Type, Arity extends number> = Arity extends Arity ? number extends Arity ? Type[] : TupleOf<Type, Arity, []> : never;
export type WithArity<Type extends {
    length?: number;
}, Arity extends number> = number extends Type['length'] ? Arity extends 0 ? boolean : Arity extends 1 ? Type : number extends Arity ? boolean | Type | Tuple<Type, Arity> : Tuple<Type, Arity> : Type;
export declare function rerouteArguments<A, B>(a: A | B, b: B): [Exclude<A, B>, B];
export declare function rerouteArguments<A, B>(a: A | B | undefined, b: B): [Exclude<A, B> | undefined, B];
