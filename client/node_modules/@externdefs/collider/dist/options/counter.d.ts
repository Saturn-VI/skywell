import type { CommandBuilder, RunState } from '../core/index.js';
import { Option, type OptionFlags, type OptionReturn } from './base.js';
export type CounterOptionFlags = OptionFlags;
export declare function Counter(descriptor: string[], opts: CounterOptionFlags & {
    required: true;
}): OptionReturn<number>;
export declare function Counter(descriptor: string[], opts?: CounterOptionFlags): OptionReturn<number | undefined>;
export declare function Counter(descriptor: string[], initialValue: number, opts?: Omit<CounterOptionFlags, 'required'>): OptionReturn<number>;
export declare class CounterOption extends Option<number | undefined> {
    description: string | undefined;
    required: boolean;
    hidden: boolean;
    descriptor: string[];
    initialValue: number | undefined;
    constructor(descriptor: string[], initialValue: number | undefined, options: CounterOptionFlags);
    define(builder: CommandBuilder<unknown>, _key: string): void;
    transform(_builder: CommandBuilder<unknown>, _key: string, state: RunState): number | undefined;
}
